%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
% MF Calport v1.0                                                         %
% Â© 2015 by Marco Mueller                                                 %
% "interdotdraw" and "dotdraw" macros by Linus Romer                      %
% thanks to Linus Roemer, Alexis Reigel, Jeremy Gibbons                   %
% <http://www.metaflop.com>                                               %
% licensed under gpl v3: www.gnu.org/licenses/                            %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                          
%                                                                         %
% This program is free software: you can redistribute it and/or modify    %
% it under the terms of the GNU General Public License as published       %
% bythe Free Software Foundation, either version 3 of the License, or     %
% (at your option) any later version.                                     %
%                                                                         %
% This program is distributed in the hope that it will be useful,         %
% but WITHOUT ANY WARRANTY; without even the implied warranty of          % 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU        % 
% General Public License for more details.                                %
%                                                                         %
% You should have received a copy of the GNU General Public License       %
% along with this program. If not, see <http://www.gnu.org/licenses/>.    %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode_setup;
currenttransform:=identity slanted slant;
define_pixels(s,u,xgap,px,py,ptiny,x_ht,ht,o);

% pen settings %
path penpath;
if penshape=1:
 penpath=fullcircle xscaled px yscaled py rotated prot;
 pickup pencircle xscaled px yscaled py rotated prot; 
elseif penshape=2:
 penpath=unitsquare shifted -(.5,.5) xscaled px yscaled py rotated prot;
 pickup pensquare xscaled px yscaled py rotated prot; 
elseif penshape=3:
 penpath=unitsquare shifted -(.5,.5) xscaled px yscaled eps rotated prot;
 pickup penrazor xscaled px rotated prot;
elseif penshape=4:
 penpath=((dir(-30)--dir(90)--dir(210)--cycle) xscaled .5px yscaled .5py rotated prot);
 capsule_def(pentriangle) makepen(penpath);
 pickup pentriangle;
elseif penshape=5:
 penpath=((dir(-54)--dir(18)--dir(90)--dir(162)--dir(234)--cycle) xscaled .5px yscaled .5py rotated prot);
 capsule_def(penpentagon) makepen(penpath);
 pickup penpentagon; 
fi
cornerpen:=savepen;

def adjustwidth(expr left_adjustment,right_adjustment) = 
 l:=-hround(left_adjustment*hppp);
 interim xoffset:=-l; 
 charwd:=charwd+left_adjustment+right_adjustment; 
 r:=l+hround(charwd*hppp);
 w:=r-hround(right_adjustment*hppp); 
enddef;

% interdotdraw marks a path with equally spaced dots
% the vertices inbetween the starting and end vertices 
% are generally not hit exactly (in contrast to dotdraw)
def interdotdraw expr c =
 begingroup
  pickup pencircle scaled ptiny;
  save arclengths,diameter,divlength,divnumber,j;
  numeric diameter,divlength,divnumber,j;
  pair arclengths[]; % needs to be in this format to avoid overflows
  % note: the pair (11,500) means 11500
  diameter:=max(px,py);
  % draw first and last point:
  draw penpath shifted point 0 of c;
  % calculate the arclengths from the beginning to every 1/100-th part
  % of a subpath, hence arclength[200] is the length of the subpath(0,2)
  arclengths[0]:=(0,0);
  for t=1 upto (100*length(c)):
   arclengths[t]:=arclengths[t-1]
    +(0,length((point ((t-1)/100) of c)-(point (t/100) of c)));
   if ypart(arclengths[t])>1000:
    arclengths[t]:=(xpart(arclengths[t])+1,ypart(arclengths[t])-1000);
   fi
  endfor
  divnumber:=round(ypart(arclengths[100*length(c)])/(dnum*diameter)
  +xpart(arclengths[100*length(c)])/(dnum*diameter)*1000); % number of points on one subpath
  divlength:=ypart(arclengths[100*length(c)])/divnumber
  +xpart(arclengths[100*length(c)])/divnumber*1000; % distance inbetween dots
  j:=0; % current path time (will be increased)
  for k=1 upto (divnumber-1): 
   % search for the pathtime j with the correct distance:
   forever:
    if (j>=100*length(c)) or 
      ((ypart(arclengths[j])
      +1000*xpart(arclengths[j]))>=k*divlength):
      % check if j or j-1 is the closer index:
      if abs(ypart(arclengths[j-1])
      +1000*xpart(arclengths[j-1])-k*divlength)
      <
      abs((ypart(arclengths[j])
      +1000*xpart(arclengths[j]))-k*divlength): 
       j:=j-1;
      fi
      exitif 0=0; % exit anyway
     fi
    j:=j+1;
   endfor
   draw penpath shifted point (j/100) of c;
  endfor
  draw penpath shifted point length(c) of c;
 endgroup
enddef;

% dotdraw marks a path with approximately equally spaced dots
% the vertices inbetween the starting and end vertices 
% are hit exactly (in contrast to interdotdraw)
def dotdraw expr c =
 begingroup
  pickup pencircle scaled ptiny;
  save arclengths,diameter,divlength,divnumber,j;
  numeric diameter,divlength,divnumber,j;
  pair arclengths[]; % needs to be in this format to avoid overflows
  % note: the pair (11,500) means 11500
  diameter:=max(px,py);
  % draw first and last point:
  draw penpath shifted point 0 of c;
  % calculate the arclengths from the beginning to every 1/100-th part
  % of a subpath, hence arclength[200] is the length of the subpath(0,2)
  arclengths[0]:=(0,0);
  for t=1 upto (100*length(c)):
   arclengths[t]:=arclengths[t-1]
    +(0,length((point ((t-1)/100) of c)-(point (t/100) of c)));
   if ypart(arclengths[t])>1000:
    arclengths[t]:=(xpart(arclengths[t])+1,ypart(arclengths[t])-1000);
   fi
  endfor
  for i=1 upto length(c): % i is the subpath index
   divnumber:=round(ypart(arclengths[100*i]-arclengths[100*(i-1)])/(dnum*diameter)
   +xpart(arclengths[100*i]-arclengths[100*(i-1)])/(dnum*diameter)*1000); % number of points on one subpath
   divlength:=ypart(arclengths[100*i]-arclengths[100*(i-1)])/divnumber
   +xpart(arclengths[100*i]-arclengths[100*(i-1)])/divnumber*1000; % distance inbetween dots
   j:=0; % current path time (will be increased)
   for k=1 upto (divnumber-1): 
    % search for the pathtime j with the correct distance:
    forever:
     if (j>=100*length(c)) or 
      ((ypart(arclengths[j]-arclengths[100*(i-1)])
      +1000*xpart(arclengths[j]-arclengths[100*(i-1)]))>=k*divlength):
      % check if j or j-1 is the closer index:
      if abs((ypart(arclengths[j-1]-arclengths[100*(i-1)])
      +1000*xpart(arclengths[j-1]-arclengths[100*(i-1)]))-k*divlength)
      <
      abs((ypart(arclengths[j]-arclengths[100*(i-1)])
      +1000*xpart(arclengths[j]-arclengths[100*(i-1)]))-k*divlength): 
       j:=j-1;
      fi
      exitif 0=0; % exit anyway
     fi
     j:=j+1;
    endfor
    draw penpath shifted point (j/100) of c;
   endfor
   draw penpath shifted point i of c;
  endfor
 endgroup
enddef;

beginchar("A",50u#,ht#,0);
pickup cornerpen;
x1=0;
x2=0.5w;
x3=w;
bot y1=bot y3=0;
top y2=h;
y4=y5=0.5h;
z4=whatever[z1,z2];
z5=whatever[z2,z3];
dotdraw z1--z4--z2--z5--z3;
dotdraw z4--z5;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("B",50u#,ht#,0);
pickup cornerpen;
x1=x2=x3=0;
x4=x5=x6=0.6w;
x7=x8=w;
bot y1=bot y4=0;
top y3=top y6=h;
y2=y5=0.5h;
y7=0.75h;
y8=0.25h;
dotdraw z4--z1--z2--z3--z6{right}...z7{down}...z5{left}--z2;
dotdraw z5{right}...z8{down}...z4{left};
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("C",50u#,ht#,0);
pickup cornerpen;
x1=x5=w;
x2=x4=0.5w;
x3=0;
top y2=h+o;
y1=0.8h;
y3=0.5h;
y5=0.2h;
bot y4=-o;
dotdraw z1...z2{left}...z3{down}...z4{right}...z5;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("D",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=x4=0.5w;
x5=w;
bot y1=bot y3=0;
top y2=top y4=h;
y5=0.5h;
dotdraw z1--z2--z4{right}...z5{down}...z3{left}--z1;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("E",50u#,ht#,0);
pickup cornerpen;
x1=x2=x5=0;
x3=x4=w;
x6=0.8w;
bot y1=bot y3=0;
top y2=top y4=h;
y5=y6=0.5h;
dotdraw z3--z1--z5--z2--z4;
dotdraw z5--z6;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("F",50u#,ht#,0);
pickup cornerpen;
x1=x2=x5=0;
x4=w;
x6=0.8w;
bot y1=0;
top y2=top y4=h;
y5=y6=0.5h;
dotdraw z1--z5--z2--z4;
dotdraw z5--z6;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("G",50u#,ht#,0);
pickup cornerpen;
x1=x5=x6=w;
x2=x4=x7=0.5w;
x3=0;
top y2=h+o;
y1=0.8h;
y3=y6=y7=0.5h;
y5=0.3h;
bot y4=-o;
dotdraw z1...z2{left}...z3{down}...z4{right}...z6--z7;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("H",50u#,ht#,0);
pickup cornerpen;
x1=x2=x5=0;
x3=x4=x6=w;
bot y1=bot y3=0;
top y2=top y4=h;
y5=y6=0.5h;
dotdraw z1--z5--z2;
dotdraw z3--z6--z4;
dotdraw z5--z6;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("I",50u#,ht#,0);
pickup cornerpen;
x1=x2=0.5w;
x3=x5=0.2w;
x4=x6=0.8w;
bot y1=bot y5=bot y6=0;
top y2=top y3=top y4=h;
dotdraw z1--z2;
dotdraw z3--z2--z4;
dotdraw z5--z1--z6;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("J",50u#,ht#,0);
pickup cornerpen;
x5=0;
x2=0.25w;
x4=0.5w;
x1=x3=w;
top y1=top y2=h;
y3=0.5h;
y5=0.3h;
bot y4=-o;
dotdraw z2--z1--z3{down}...z4{left}...z5;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("K",50u#,ht#,0);
pickup cornerpen;
x1=x2=x4=0;
x3=x5=w;
y4=0.5h;
bot y2=bot y3=0;
top y1=top y5=h;
dotdraw z1--z4--z2;
dotdraw z3--z4--z5;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("L",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=w;
bot y2=bot y3=0;
top y1=h;
dotdraw z1--z2--z3;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("M",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=x4=w;
x5=0.5w;
bot y1=bot y3=0;
top y2=top y4=h;
y5=0.5h;
dotdraw z1--z2--z5--z4--z3;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("N",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=x4=w;
bot y1=bot y3=0;
top y2=top y4=h;
dotdraw z1--z2--z3--z4;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("O",50u#,ht#,0);
pickup cornerpen;
x1=w;
x2=x4=0.5w;
x3=0;
top y2=h+o;
y1=y3=0.5h;
bot y4=-o;
dotdraw z1{up}...z2{left}...z3{down}...z4{right}...cycle;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("P",50u#,ht#,0);
pickup cornerpen;
x1=x2=x3=0;
x5=x6=0.6w;
x7=w;
bot y1=0;
top y3=top y6=h;
y2=y5=0.5h;
y7=0.75h;
dotdraw z1--z2--z3--z6{right}...z7{down}...z5{left}--z2;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("Q",50u#,ht#,desc_depth#);
pickup cornerpen;
x1=w;
x2=x4=x5=x6=0.5w;
x3=0;
top y2=h+o;
y1=y3=0.5h;
y5=0.25w;
y6=-0.5d;
bot y4=-o;
dotdraw z1{up}...z2{left}...z3{down}...z4{right}...cycle;
dotdraw z5--z4--z6;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("R",50u#,ht#,0);
pickup cornerpen;
x1=x2=x3=0;
x5=x6=0.6w;
x4=x7=w;
bot y1=bot y4=0;
top y3=top y6=h;
y2=y5=0.5h;
y7=0.75h;
dotdraw z1--z2--z3--z6{right}...z7{down}...z5{left}--z4;
dotdraw z5--z2;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("S",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=x5=x6=0.5w;
x4=x7=w;
bot y3=0;
top y6=h;
y1=y4=0.25h;
y5=0.5h;
y2=y7=0.75h;
interdotdraw z1{down}...z3{right}...z4{up}...z2{up}...z6{right}...z7{down};
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("T",50u#,ht#,0);
pickup cornerpen;
x1=x2=0.5w;
x3=0;
x4=w;
bot y1=0;
top y2=top y3=top y4=h;
dotdraw z1--z2;
dotdraw z3--z2--z4;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("U",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=0.5w;
x4=x7=w;
bot y3=-o;
y1=y4=0.3h;
top y2=top y7=h;
dotdraw z2--z1{down}...z3{right}...z4{up}--z7;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("V",50u#,ht#,0);
pickup cornerpen;
x1=0;
x3=0.5w;
x4=w;
bot y3=0;
top y1=top y4=h;
dotdraw z1--z3--z4;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("W",50u#,ht#,0);
pickup cornerpen;
x2=0;
x1=0.25w;
x5=0.5w;
x3=0.75w;
x4=w;
bot y1=bot y3=0;
top y2=top y4=top y5=h;
dotdraw z2--z1--z5--z3--z4;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("X",50u#,ht#,0);
pickup cornerpen;
x1=0;
x2=0.1w;
x3=w;
x4=0.9w;
x5=0.5w;
bot y1=bot y3=0;
top y2=top y4=h;
y5=0.5h;
dotdraw z1--z5--z4;
dotdraw z2--z5--z3;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("Y",50u#,ht#,0);
pickup cornerpen;
x2=0;
x4=w;
x1=x5=0.5w;
bot y1=0;
top y2=top y4=h;
y5=0.5h;
dotdraw z2--z5--z4;
dotdraw z1--z5;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;

beginchar("Z",50u#,ht#,0);
pickup cornerpen;
x1=x2=0;
x3=x4=w;
x5=0.5w;
bot y1=bot y3=0;
top y2=top y4=h;
y5=0.5h;
dotdraw z2--z4--z1--z3;
adjustwidth(xgap#,xgap#);
penlabels(range 1 thru 150);
endchar;
